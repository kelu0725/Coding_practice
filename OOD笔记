lc 225 Stack/Queue
简单题，能够想到不够优化的做法。优化后，操作更为简洁。
Notes:
1. Queue用Linkedlist实现：
Reasons:
Principle of reusable object-oriented design.
https://www.artima.com/lejava/articles/designprinciples.html
Program to an interface, not an implementation.
Decoupled from implementation.That means the implementation can vary, and that's a healthy dependency relationship.
So this approach gives you flexibility, but it also separates the really valuable part, the design, 
from the implementation, which allows clients to be decoupled from the implementation. 

2. Java Collection
Set ->EnumSet 
    ->SortedSet -> TreeSet
    ->HashSet -> LinkedHashSet
List -> ArrayList
     -> LinkedList
     -> Vector -> Stack
Queue -> Dequeue -> LinkedList
      -> PriorityQueue
      
3. Design: declare class and initialize it in the constructor. 
An object is created in the heap after we call constructor. Don't initialize in the field.

lc 281 Iterator
想到不够优化，follow up当k个List时，一个一个存入List会占用空间过大。
优化做法：用iterator. 
Notes:
1. Why iterator is faster? ??????????/Source Code for Iterator?????
for linkedlist, it is faster; for arraylist, not faster?

2. remove vs poll in Queue
The remove and poll methods differ in their behavior only when the queue is empty. Under these circumstances, 
remove throws NoSuchElementException , while poll returns null . 
The element and peek methods return, but do not remove, the head of the queue.

lc Design Twitter
