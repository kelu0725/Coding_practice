
一般来说，一旦出现“unique”，就落入使用哈希表或者bitset来判断元素出现与否的范畴。
一旦需要统计一个元素集中元素出现的次数，我们就应该想到哈希表。

哈希表：
哈希表是基于键查找，使用者提供键，哈希表根据自身的哈希函数计算出一个地址，将当前元素储存到改地址。
基于数组的存储功能，知道地址后拿到元素。
Java的哈希表基于数组和链表，采用chaining的方式解决collision.（更详细需要继续看）

String Matching
假设在长度为n的母串中匹配长度为m的子串:
- Brute-Force算法： 顺序遍历母串，将每个字符作为匹配的起始字符，判断是否匹配子串。时间复杂度 O(mn)。
- Rabin-Karp算法：将每一个匹配子串映射为一个哈希值。例如，将子串看做一个多进制数，比较它的值与母串中相同长度子串的哈希值，如果相同，再细致地按字符确认字符串是否确实相同。顺序计算母串哈希值的过程中，使用增量计算的方法：扣除最高位的哈希值，增加最低位的哈希值。因此能在平均情况下做到O(m+n)。
Matching:


