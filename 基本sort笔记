/**
Practice to use different O(N^2):sort algorithm
**/

1. Selection Sort: 
For each iteration, the smallest i elements are selected, the rest only has to compare with this element.
The left side is always sorted.
Decide the j th element.

version1:Keep a min pointer for the rest of array, initialize it with the last one in the sorted array.
Scan the rest of array one by one, compare with the min pointer.
Find the smallest number in the rest of the array, and swap it with last one in the sorted array. 

n=nums.length;
for(int i = 0; i<n; i++){
    int min = i;
    for(int j=i; j<n; j++){
    if(nums[j]<nums[min]){
        min=j;
      }
    int tmp = nums[min];
    nums[min]=nums[i];
    nums[i]=tmp;
    }
 }
 
version2:

for(int i = 0; i<n; i++){
 for(int j = i; j<n; j++){
  ifï¼ˆnums[i]>nums[j]){
    int tmp = nuoms[j];
    nums[j]=nums[i];
    nums[i]=tmp;
    }
  }

2. Insertion Sort:
For the rest of the array, compare it with each of the elements in sorted array, find its position. 
In the sorted array, reach its final position.
decide position for ith element.

version1:
for(int i =0; i<n; i++){
    for(int j=i; j>0; j--){
        if(nums[j]<nums[j-1]){
            int tmp = nums[j];
            nums[j]=nums[j-1];
            num[j-1]=tmp;
            }
         }
      }
version2: 
for(int i =0; i<n; i++){
    int tmp = nums[i]; // try to find pos for this number: tmp
    int j= i-1;
    while(j>=0 && nums[j]>tmp){ //walk left until find the smaller element, then nums[j] should be tmp
            nums[j+1]=nums[j];
            j--;
         }
      nums[j+1]=tmp;
      }
  }

3. Bubble Sort: compare adjacent numbers and swap them if they are in wrong order, repeat the steps
while(true){
 order=false;
 for(int i = 0; i<nums.length-1; i++){
    if(nums[i]>nums[i+1]){
        int tmp = nums[i];
        nums[i]=nums[i+1];
        nums[i+1]=tmp;
        order = true;
      }
     }
  if(!order) break; //means it never reaches if condition
   }
 }


